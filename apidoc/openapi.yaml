openapi: 3.0.3
info:
  title: Todo Board API
  description: API for the Todo Board application
  version: 1.0.0
  contact:
    name: API Support
    email: support@todoboard.com

servers:
  - url: 'https://api.todoboard.com/v1'
    description: Production server
  - url: 'https://staging-api.todoboard.com/v1'
    description: Staging server
  - url: 'http://localhost:8080/v1'
    description: Local development server

tags:
  - name: Tasks
    description: Operations related to tasks
  - name: Users
    description: Operations related to users
  - name: Tags
    description: Operations related to tags

paths:
  /todos/all:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      description: Returns a paginated list of all tasks
      operationId: getAllTasks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseTodoItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Tasks
      summary: Search tasks
      description: Search tasks with complex filtering
      operationId: searchTasks
      requestBody:
        description: Search criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSearchDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseTodoItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/board:
    get:
      tags:
        - Tasks
      summary: Get board tasks
      description: Returns a paginated list of tasks for the board view (excluding backlog)
      operationId: getBoardTasks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseTodoItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/backlog:
    get:
      tags:
        - Tasks
      summary: Get backlog tasks
      description: Returns a paginated list of tasks in the backlog
      operationId: getBacklogTasks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseTodoItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/todo/status/{status}:
    get:
      tags:
        - Tasks
      summary: Get tasks by status
      description: Returns a paginated list of tasks with the specified status
      operationId: getTasksByStatus
      parameters:
        - name: status
          in: path
          description: Status to filter by
          required: true
          schema:
            $ref: '#/components/schemas/Status'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseTodoItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/todo:
    put:
      tags:
        - Tasks
      summary: Create a new task
      description: Creates a new task
      operationId: createTask
      requestBody:
        description: Task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItemCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Tasks
      summary: Update an existing task
      description: Updates an existing task
      operationId: updateTask
      requestBody:
        description: Task to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItem'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/todo/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Returns a task by ID
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          description: ID of the task to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Deletes a task by ID
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of the task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Returns a list of all users
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tags:
    get:
      tags:
        - Tags
      summary: Get all tags
      description: Returns a list of all tags
      operationId: getTags
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns a JWT token
      operationId: login
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Registers a new user
      operationId: register
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Returns the profile of the authenticated user
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Users
      summary: Update user profile
      description: Updates the profile of the authenticated user
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        description: Updated user profile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Status:
      type: string
      enum:
        - BACKLOG
        - READY
        - IN_PROGRESS
        - REVIEW
        - REOPENED
        - DONE
      example: IN_PROGRESS

    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          example: 123456789
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        picture:
          type: string
          format: uri
          example: https://ui-avatars.com/api/?name=John+Doe&background=random

    UserProfile:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            location:
              type: string
              example: New York, USA
            timezone:
              type: string
              example: America/New_York
            bio:
              type: string
              example: Software developer with 5 years of experience
            language:
              type: string
              example: en-US
            notificationSettings:
              type: object
              properties:
                emailNotifications:
                  type: boolean
                  example: true
                pushNotifications:
                  type: boolean
                  example: true
                taskReminders:
                  type: boolean
                  example: true
                weeklyDigest:
                  type: boolean
                  example: false
            createdAt:
              type: string
              format: date-time
              example: 2023-01-01T00:00:00Z
            updatedAt:
              type: string
              format: date-time
              example: 2023-01-01T00:00:00Z

    UserProfileUpdate:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        location:
          type: string
          example: New York, USA
        timezone:
          type: string
          example: America/New_York
        bio:
          type: string
          example: Software developer with 5 years of experience
        language:
          type: string
          example: en-US
        notificationSettings:
          type: object
          properties:
            emailNotifications:
              type: boolean
              example: true
            pushNotifications:
              type: boolean
              example: true
            taskReminders:
              type: boolean
              example: true
            weeklyDigest:
              type: boolean
              example: false

    Tag:
      type: object
      required:
        - id
        - name
        - color
      properties:
        id:
          type: string
          example: dev
        name:
          type: string
          example: Development
        color:
          type: string
          example: '#3b82f6'

    TodoItem:
      type: object
      required:
        - id
        - title
        - description
        - status
        - tags
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Implement login page
        description:
          type: string
          example: Create a login page with email and password fields
        dueDate:
          type: string
          format: date-time
          nullable: true
          example: 2023-12-31T00:00:00Z
        status:
          $ref: '#/components/schemas/Status'
        ticketImageUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/images/ticket.png
        attachedDocumentUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/documents/spec.pdf
        assignee:
          $ref: '#/components/schemas/User'
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    TodoItemCreate:
      type: object
      required:
        - title
        - description
        - status
        - tags
      properties:
        title:
          type: string
          example: Implement login page
        description:
          type: string
          example: Create a login page with email and password fields
        dueDate:
          type: string
          format: date-time
          nullable: true
          example: 2023-12-31T00:00:00Z
        status:
          $ref: '#/components/schemas/Status'
        ticketImageUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/images/ticket.png
        attachedDocumentUrl:
          type: string
          format: uri
          nullable: true
          example: https://example.com/documents/spec.pdf
        assignee:
          $ref: '#/components/schemas/User'
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    PageResponseTodoItem:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TodoItem'
        totalElements:
          type: integer
          format: int64
          example: 100
        totalPages:
          type: integer
          format: int32
          example: 10
        size:
          type: integer
          format: int32
          example: 10
        number:
          type: integer
          format: int32
          description: Current page (0-based)
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false
        empty:
          type: boolean
          example: false

    TitleDTO:
      type: object
      required:
        - text
        - exactMatch
      properties:
        text:
          type: string
          example: Login page
        exactMatch:
          type: boolean
          example: false

    SortDTO:
      type: object
      required:
        - property
        - direction
      properties:
        property:
          type: string
          example: dueDate
        direction:
          type: string
          enum:
            - asc
            - desc
          example: desc

    PaginationDTO:
      type: object
      required:
        - page
        - size
      properties:
        page:
          type: integer
          format: int32
          description: Page number (0-based)
          example: 0
        size:
          type: integer
          format: int32
          example: 10
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortDTO'

    TaskSearchDTO:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PaginationDTO'
        title:
          $ref: '#/components/schemas/TitleDTO'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/Status'
        fromDate:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        toDate:
          type: string
          format: date-time
          example: 2023-12-31T23:59:59Z
        assigneeId:
          type: string
          example: 123456789
        tagIds:
          type: array
          items:
            type: string
          example: ["dev", "design"]

    Error:
      type: object
      properties:
        code:
          type: string
          example: INVALID_REQUEST
        message:
          type: string
          example: Invalid request parameters
        details:
          type: array
          items:
            type: string
          example: ["Field 'email' is required"]

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        default: 0
        minimum: 0

    SizeParam:
      name: size
      in: query
      description: Number of items per page
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100

    SortParam:
      name: sort
      in: query
      description: Sort criteria in the format property,direction (e.g. dueDate,desc)
      schema:
        type: string
        example: dueDate,desc

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
